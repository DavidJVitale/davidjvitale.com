<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-03T21:56:26-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DavidJVitale.com</title><subtitle></subtitle><entry><title type="html">Retrospective2</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/retrospective2" rel="alternate" type="text/html" title="Retrospective2" /><published>2019-05-23T01:00:00-07:00</published><updated>2019-05-23T01:00:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/retrospective2</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/retrospective2">&lt;div id=&quot;leaflet-map-623a5d35261d4f921dd6cb6096dd17dd&quot; class=&quot;leaflet-map&quot;&gt;&lt;/div&gt;
&lt;script&gt;
(() =&gt; {
    //Config section
    var leafletCdn = &quot;https://unpkg.com/leaflet@1.5.1/dist/&quot;;
    var esriLeafletCdn = &quot;https://unpkg.com/esri-leaflet/dist/&quot;;

    var leafletCssId = &quot;leaflet-css-head&quot;;
    var leafletJsId = &quot;leaflet-js-head&quot;;
    var esriLeafletJsId = &quot;esri-leaflet-js-head&quot;;
    var leafletProvidersJsId = &quot;leaflet-providers-js-head&quot;;

    var tagInputArg = {&quot;div_id&quot;: &quot;my-map-123&quot;} ;
    var defaultMapElId = &quot;leaflet-map-623a5d35261d4f921dd6cb6096dd17dd&quot;;
    var defaultMapElStyle = &quot;height:300px; margin:15px&quot;;
    var mapEl = document.getElementById(defaultMapElId);
    if('div_id' in tagInputArg){
        mapEl.id = tagInputArg['div_id'];
    }
    var mapCssEl = document.createElement(&quot;style&quot;);
    mapCssEl.innerHTML = &quot;#&quot; + defaultMapElId + &quot;{&quot; + defaultMapElStyle + &quot;}&quot;;
    document.head.appendChild(mapCssEl);

    function _createMap(){
        console.log(&quot;Creating map 623a5d35261d4f921dd6cb6096dd17dd..&quot;);
        var map = L.map(mapEl.id).setView([0,0], 3);
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
        var leaflet_item_jsons = [
{&quot;type&quot;: &quot;LeafletFeature&quot;, &quot;id&quot;: &quot;1aa34bdc4&quot;, &quot;value&quot;: {&quot;foo&quot; : &quot;bar&quot;}},
];
        for(var i=0; i&lt;leaflet_item_jsons.length; i++){
            var leaflet_item = leaflet_item_jsons[i];
            console.log(&quot;Leaflet item #&quot; + i);
            console.log(leaflet_item);
        }
    }

    function createMap(){
        var prevOnLoad;
        if(window.onload){
            prevOnLoad = window.onload;
        }
        window.onload = () =&gt; {
            _createMap();
            if(prevOnLoad){
                prevOnLoad();
            }
        }
    }

    //Load the correct elements by adding to head: when ready, call createMap()

    // Add the CSS first, don't worry about when it loads
    var leafletCssEl = document.createElement(&quot;link&quot;);
    leafletCssEl.id = leafletCssId;
    leafletCssEl.rel = &quot;stylesheet&quot;;
    leafletCssEl.href = leafletCdn + &quot;leaflet.css&quot;;
    if(!document.getElementById(leafletCssEl.id)){
        document.head.appendChild(leafletCssEl);
    }

    function addToHeadIfNotLoaded(el) {
        //Add the el to the head if it doesn't exist already. If it does, every
        //thing we need is already loaded, so draw the map
        if(!document.getElementById(el.id)){
            document.head.appendChild(el);
        } else {
            createMap();
        }
    }

    // Load the main leaflet.js code, wait for it to load
    var leafletJsEl = document.createElement(&quot;script&quot;);
    leafletJsEl.id = leafletJsId;
    leafletJsEl.onload = () =&gt; {
        //After loaded, load the esri-leaflet.js code, wait for it to load
        var esriEl = document.createElement(&quot;script&quot;);
        esriEl.id = esriLeafletJsId;
        esriEl.onload = () =&gt; {
            //After loaded, add the leaflet-providers &lt;script&gt;, don't wait to load
            provEl = document.createElement(&quot;script&quot;);
            provEl.id = leafletProvidersJsId;
            provEl.innerHTML = `//Taken from https://github.com/leaflet-extras/leaflet-providers
(function (root, factory) {
	if (typeof define === 'function' &amp;&amp; define.amd) {
		// AMD. Register as an anonymous module.
		define(['leaflet'], factory);
	} else if (typeof modules === 'object' &amp;&amp; module.exports) {
		// define a Common JS module that relies on 'leaflet'
		module.exports = factory(require('leaflet'));
	} else {
		// Assume Leaflet is loaded into global object L already
		factory(L);
	}
}(this, function (L) {
	'use strict';

	L.TileLayer.Provider = L.TileLayer.extend({
		initialize: function (arg, options) {
			var providers = L.TileLayer.Provider.providers;

			var parts = arg.split('.');

			var providerName = parts[0];
			var variantName = parts[1];

			if (!providers[providerName]) {
				throw 'No such provider (' + providerName + ')';
			}

			var provider = {
				url: providers[providerName].url,
				options: providers[providerName].options
			};

			// overwrite values in provider from variant.
			if (variantName &amp;&amp; 'variants' in providers[providerName]) {
				if (!(variantName in providers[providerName].variants)) {
					throw 'No such variant of ' + providerName + ' (' + variantName + ')';
				}
				var variant = providers[providerName].variants[variantName];
				var variantOptions;
				if (typeof variant === 'string') {
					variantOptions = {
						variant: variant
					};
				} else {
					variantOptions = variant.options;
				}
				provider = {
					url: variant.url || provider.url,
					options: L.Util.extend({}, provider.options, variantOptions)
				};
			}

			// replace attribution placeholders with their values from toplevel provider attribution,
			// recursively
			var attributionReplacer = function (attr) {
				if (attr.indexOf('{attribution.') === -1) {
					return attr;
				}
				return attr.replace(/\{attribution.(\w*)\}/g,
					function (match, attributionName) {
						return attributionReplacer(providers[attributionName].options.attribution);
					}
				);
			};
			provider.options.attribution = attributionReplacer(provider.options.attribution);

			// Compute final options combining provider options with any user overrides
			var layerOpts = L.Util.extend({}, provider.options, options);
			L.TileLayer.prototype.initialize.call(this, provider.url, layerOpts);
		}
	});

	/**
	 * Definition of providers.
	 * see http://leafletjs.com/reference.html#tilelayer for options in the options map.
	 */

	L.TileLayer.Provider.providers = {
		OpenStreetMap: {
			url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution:
					'&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors'
			},
			variants: {
				Mapnik: {},
				DE: {
					url: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',
					options: {
						maxZoom: 18
					}
				},
				CH: {
					url: 'https://tile.osm.ch/switzerland/{z}/{x}/{y}.png',
					options: {
						maxZoom: 18,
						bounds: [[45, 5], [48, 11]]
					}
				},
				France: {
					url: 'https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png',
					options: {
						maxZoom: 20,
						attribution: '&amp;copy; Openstreetmap France | {attribution.OpenStreetMap}'
					}
				},
				HOT: {
					url: 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
					options: {
						attribution:
							'{attribution.OpenStreetMap}, ' +
							'Tiles style by &lt;a href=&quot;https://www.hotosm.org/&quot; target=&quot;_blank&quot;&gt;Humanitarian OpenStreetMap Team&lt;/a&gt; ' +
							'hosted by &lt;a href=&quot;https://openstreetmap.fr/&quot; target=&quot;_blank&quot;&gt;OpenStreetMap France&lt;/a&gt;'
					}
				},
				BZH: {
					url: 'https://tile.openstreetmap.bzh/br/{z}/{x}/{y}.png',
					options: {
						attribution: '{attribution.OpenStreetMap}, Tiles courtesy of &lt;a href=&quot;http://www.openstreetmap.bzh/&quot; target=&quot;_blank&quot;&gt;Breton OpenStreetMap Team&lt;/a&gt;',
						bounds: [[46.2, -5.5], [50, 0.7]]
					}
				}
			}
		},
		OpenSeaMap: {
			url: 'https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png',
			options: {
				attribution: 'Map data: &amp;copy; &lt;a href=&quot;http://www.openseamap.org&quot;&gt;OpenSeaMap&lt;/a&gt; contributors'
			}
		},
		OpenPtMap: {
			url: 'http://openptmap.org/tiles/{z}/{x}/{y}.png',
			options: {
				maxZoom: 17,
				attribution: 'Map data: &amp;copy; &lt;a href=&quot;http://www.openptmap.org&quot;&gt;OpenPtMap&lt;/a&gt; contributors'
			}
		},
		OpenTopoMap: {
			url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
			options: {
				maxZoom: 17,
				attribution: 'Map data: {attribution.OpenStreetMap}, &lt;a href=&quot;http://viewfinderpanoramas.org&quot;&gt;SRTM&lt;/a&gt; | Map style: &amp;copy; &lt;a href=&quot;https://opentopomap.org&quot;&gt;OpenTopoMap&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		OpenRailwayMap: {
			url: 'https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution: 'Map data: {attribution.OpenStreetMap} | Map style: &amp;copy; &lt;a href=&quot;https://www.OpenRailwayMap.org&quot;&gt;OpenRailwayMap&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		OpenFireMap: {
			url: 'http://openfiremap.org/hytiles/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution: 'Map data: {attribution.OpenStreetMap} | Map style: &amp;copy; &lt;a href=&quot;http://www.openfiremap.org&quot;&gt;OpenFireMap&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		SafeCast: {
			url: 'https://s3.amazonaws.com/te512.safecast.org/{z}/{x}/{y}.png',
			options: {
				maxZoom: 16,
				attribution: 'Map data: {attribution.OpenStreetMap} | Map style: &amp;copy; &lt;a href=&quot;https://blog.safecast.org/about/&quot;&gt;SafeCast&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		Thunderforest: {
			url: 'https://{s}.tile.thunderforest.com/{variant}/{z}/{x}/{y}.png?apikey={apikey}',
			options: {
				attribution:
					'&amp;copy; &lt;a href=&quot;http://www.thunderforest.com/&quot;&gt;Thunderforest&lt;/a&gt;, {attribution.OpenStreetMap}',
				variant: 'cycle',
				apikey: '&lt;insert your api key here&gt;',
				maxZoom: 22
			},
			variants: {
				OpenCycleMap: 'cycle',
				Transport: {
					options: {
						variant: 'transport'
					}
				},
				TransportDark: {
					options: {
						variant: 'transport-dark'
					}
				},
				SpinalMap: {
					options: {
						variant: 'spinal-map'
					}
				},
				Landscape: 'landscape',
				Outdoors: 'outdoors',
				Pioneer: 'pioneer'
			}
		},
		OpenMapSurfer: {
			url: 'https://maps.heigit.org/openmapsurfer/tiles/{variant}/webmercator/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				variant: 'roads',
				attribution: 'Imagery from &lt;a href=&quot;http://giscience.uni-hd.de/&quot;&gt;GIScience Research Group @ University of Heidelberg&lt;/a&gt; | Map data '
			},
			variants: {
				Roads: {
					options: {
						variant: 'roads',
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				},
				Hybrid: {
					options: {
						variant: 'hybrid',
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				},
				AdminBounds: {
					options: {
						variant: 'adminb',
						maxZoom: 18,
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				},
				ContourLines: {
					options: {
						variant: 'asterc',
						maxZoom: 18,
						minZoom: 13,
						attribution: '{attribution.OpenMapSurfer} &lt;a href=&quot;https://lpdaac.usgs.gov/products/aster_policies&quot;&gt;ASTER GDEM&lt;/a&gt;'
					}
				},
				Hillshade: {
					options: {
						variant: 'asterh',
						maxZoom: 18,
						attribution: '{attribution.OpenMapSurfer} &lt;a href=&quot;https://lpdaac.usgs.gov/products/aster_policies&quot;&gt;ASTER GDEM&lt;/a&gt;, &lt;a href=&quot;http://srtm.csi.cgiar.org/&quot;&gt;SRTM&lt;/a&gt;'
					}
				},
				ElementsAtRisk: {
					options: {
						variant: 'elements_at_risk',
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				}
			}
		},
		Hydda: {
			url: 'https://{s}.tile.openstreetmap.se/hydda/{variant}/{z}/{x}/{y}.png',
			options: {
				maxZoom: 18,
				variant: 'full',
				attribution: 'Tiles courtesy of &lt;a href=&quot;http://openstreetmap.se/&quot; target=&quot;_blank&quot;&gt;OpenStreetMap Sweden&lt;/a&gt; &amp;mdash; Map data {attribution.OpenStreetMap}'
			},
			variants: {
				Full: 'full',
				Base: 'base',
				RoadsAndLabels: 'roads_and_labels'
			}
		},
		MapBox: {
			url: 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}{r}.png?access_token={accessToken}',
			options: {
				attribution:
					'&lt;a href=&quot;https://www.mapbox.com/about/maps/&quot; target=&quot;_blank&quot;&gt;&amp;copy; Mapbox&lt;/a&gt; ' +
					'{attribution.OpenStreetMap} ' +
					'&lt;a href=&quot;https://www.mapbox.com/map-feedback/&quot; target=&quot;_blank&quot;&gt;Improve this map&lt;/a&gt;',
				subdomains: 'abcd',
				id: 'mapbox.streets',
				accessToken: '&lt;insert your access token here&gt;',
			}
		},
		Stamen: {
			url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/{variant}/{z}/{x}/{y}{r}.{ext}',
			options: {
				attribution:
					'Map tiles by &lt;a href=&quot;http://stamen.com&quot;&gt;Stamen Design&lt;/a&gt;, ' +
					'&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0&quot;&gt;CC BY 3.0&lt;/a&gt; &amp;mdash; ' +
					'Map data {attribution.OpenStreetMap}',
				subdomains: 'abcd',
				minZoom: 0,
				maxZoom: 20,
				variant: 'toner',
				ext: 'png'
			},
			variants: {
				Toner: 'toner',
				TonerBackground: 'toner-background',
				TonerHybrid: 'toner-hybrid',
				TonerLines: 'toner-lines',
				TonerLabels: 'toner-labels',
				TonerLite: 'toner-lite',
				Watercolor: {
					url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/{variant}/{z}/{x}/{y}.{ext}',
					options: {
						variant: 'watercolor',
						ext: 'jpg',
						minZoom: 1,
						maxZoom: 16
					}
				},
				Terrain: {
					options: {
						variant: 'terrain',
						minZoom: 0,
						maxZoom: 18
					}
				},
				TerrainBackground: {
					options: {
						variant: 'terrain-background',
						minZoom: 0,
						maxZoom: 18
					}
				},
				TopOSMRelief: {
					url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/{variant}/{z}/{x}/{y}.{ext}',
					options: {
						variant: 'toposm-color-relief',
						ext: 'jpg',
						bounds: [[22, -132], [51, -56]]
					}
				},
				TopOSMFeatures: {
					options: {
						variant: 'toposm-features',
						bounds: [[22, -132], [51, -56]],
						opacity: 0.9
					}
				}
			}
		},
		Esri: {
			url: 'https://server.arcgisonline.com/ArcGIS/rest/services/{variant}/MapServer/tile/{z}/{y}/{x}',
			options: {
				variant: 'World_Street_Map',
				attribution: 'Tiles &amp;copy; Esri'
			},
			variants: {
				WorldStreetMap: {
					options: {
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
					}
				},
				DeLorme: {
					options: {
						variant: 'Specialty/DeLorme_World_Base_Map',
						minZoom: 1,
						maxZoom: 11,
						attribution: '{attribution.Esri} &amp;mdash; Copyright: &amp;copy;2012 DeLorme'
					}
				},
				WorldTopoMap: {
					options: {
						variant: 'World_Topo_Map',
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
					}
				},
				WorldImagery: {
					options: {
						variant: 'World_Imagery',
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
					}
				},
				WorldTerrain: {
					options: {
						variant: 'World_Terrain_Base',
						maxZoom: 13,
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Source: USGS, Esri, TANA, DeLorme, and NPS'
					}
				},
				WorldShadedRelief: {
					options: {
						variant: 'World_Shaded_Relief',
						maxZoom: 13,
						attribution: '{attribution.Esri} &amp;mdash; Source: Esri'
					}
				},
				WorldPhysical: {
					options: {
						variant: 'World_Physical_Map',
						maxZoom: 8,
						attribution: '{attribution.Esri} &amp;mdash; Source: US National Park Service'
					}
				},
				OceanBasemap: {
					options: {
						variant: 'Ocean_Basemap',
						maxZoom: 13,
						attribution: '{attribution.Esri} &amp;mdash; Sources: GEBCO, NOAA, CHS, OSU, UNH, CSUMB, National Geographic, DeLorme, NAVTEQ, and Esri'
					}
				},
				NatGeoWorldMap: {
					options: {
						variant: 'NatGeo_World_Map',
						maxZoom: 16,
						attribution: '{attribution.Esri} &amp;mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC'
					}
				},
				WorldGrayCanvas: {
					options: {
						variant: 'Canvas/World_Light_Gray_Base',
						maxZoom: 16,
						attribution: '{attribution.Esri} &amp;mdash; Esri, DeLorme, NAVTEQ'
					}
				}
			}
		},
		OpenWeatherMap: {
			url: 'http://{s}.tile.openweathermap.org/map/{variant}/{z}/{x}/{y}.png?appid={apiKey}',
			options: {
				maxZoom: 19,
				attribution: 'Map data &amp;copy; &lt;a href=&quot;http://openweathermap.org&quot;&gt;OpenWeatherMap&lt;/a&gt;',
				apiKey:'&lt;insert your api key here&gt;',
				opacity: 0.5
			},
			variants: {
				Clouds: 'clouds',
				CloudsClassic: 'clouds_cls',
				Precipitation: 'precipitation',
				PrecipitationClassic: 'precipitation_cls',
				Rain: 'rain',
				RainClassic: 'rain_cls',
				Pressure: 'pressure',
				PressureContour: 'pressure_cntr',
				Wind: 'wind',
				Temperature: 'temp',
				Snow: 'snow'
			}
		},
		HERE: {
			/*
			 * HERE maps, formerly Nokia maps.
			 * These basemaps are free, but you need an API key. Please sign up at
			 * https://developer.here.com/plans
			 */
			url:
				'https://{s}.{base}.maps.api.here.com/maptile/2.1/' +
				'{type}/{mapID}/{variant}/{z}/{x}/{y}/{size}/{format}?' +
				'app_id={app_id}&amp;app_code={app_code}&amp;lg={language}',
			options: {
				attribution:
					'Map &amp;copy; 1987-' + new Date().getFullYear() + ' &lt;a href=&quot;http://developer.here.com&quot;&gt;HERE&lt;/a&gt;',
				subdomains: '1234',
				mapID: 'newest',
				'app_id': '&lt;insert your app_id here&gt;',
				'app_code': '&lt;insert your app_code here&gt;',
				base: 'base',
				variant: 'normal.day',
				maxZoom: 20,
				type: 'maptile',
				language: 'eng',
				format: 'png8',
				size: '256'
			},
			variants: {
				normalDay: 'normal.day',
				normalDayCustom: 'normal.day.custom',
				normalDayGrey: 'normal.day.grey',
				normalDayMobile: 'normal.day.mobile',
				normalDayGreyMobile: 'normal.day.grey.mobile',
				normalDayTransit: 'normal.day.transit',
				normalDayTransitMobile: 'normal.day.transit.mobile',
				normalNight: 'normal.night',
				normalNightMobile: 'normal.night.mobile',
				normalNightGrey: 'normal.night.grey',
				normalNightGreyMobile: 'normal.night.grey.mobile',
				normalNightTransit: 'normal.night.transit',
				normalNightTransitMobile: 'normal.night.transit.mobile',
				reducedDay: 'reduced.day',
				reducedNight: 'reduced.night',
				basicMap: {
					options: {
						type: 'basetile'
					}
				},
				mapLabels: {
					options: {
						type: 'labeltile',
						format: 'png'
					}
				},
				trafficFlow: {
					options: {
						base: 'traffic',
						type: 'flowtile'
					}
				},
				carnavDayGrey: 'carnav.day.grey',
				hybridDay: {
					options: {
						base: 'aerial',
						variant: 'hybrid.day'
					}
				},
				hybridDayMobile: {
					options: {
						base: 'aerial',
						variant: 'hybrid.day.mobile'
					}
				},
				hybridDayTransit: {
					options: {
						base: 'aerial',
						variant: 'hybrid.day.transit'
					}
				},
				hybridDayGrey: {
					options: {
						base: 'aerial',
						variant: 'hybrid.grey.day'
					}
				},
				pedestrianDay: 'pedestrian.day',
				pedestrianNight: 'pedestrian.night',
				satelliteDay: {
					options: {
						base: 'aerial',
						variant: 'satellite.day'
					}
				},
				terrainDay: {
					options: {
						base: 'aerial',
						variant: 'terrain.day'
					}
				},
				terrainDayMobile: {
					options: {
						base: 'aerial',
						variant: 'terrain.day.mobile'
					}
				}
			}
		},
		FreeMapSK: {
			url: 'http://t{s}.freemap.sk/T/{z}/{x}/{y}.jpeg',
			options: {
				minZoom: 8,
				maxZoom: 16,
				subdomains: '1234',
				bounds: [[47.204642, 15.996093], [49.830896, 22.576904]],
				attribution:
					'{attribution.OpenStreetMap}, vizualization CC-By-SA 2.0 &lt;a href=&quot;http://freemap.sk&quot;&gt;Freemap.sk&lt;/a&gt;'
			}
		},
		MtbMap: {
			url: 'http://tile.mtbmap.cz/mtbmap_tiles/{z}/{x}/{y}.png',
			options: {
				attribution:
					'{attribution.OpenStreetMap} &amp;amp; USGS'
			}
		},
		CartoDB: {
			url: 'https://{s}.basemaps.cartocdn.com/{variant}/{z}/{x}/{y}{r}.png',
			options: {
				attribution: '{attribution.OpenStreetMap} &amp;copy; &lt;a href=&quot;https://carto.com/attributions&quot;&gt;CARTO&lt;/a&gt;',
				subdomains: 'abcd',
				maxZoom: 19,
				variant: 'light_all'
			},
			variants: {
				Positron: 'light_all',
				PositronNoLabels: 'light_nolabels',
				PositronOnlyLabels: 'light_only_labels',
				DarkMatter: 'dark_all',
				DarkMatterNoLabels: 'dark_nolabels',
				DarkMatterOnlyLabels: 'dark_only_labels',
				Voyager: 'rastertiles/voyager',
				VoyagerNoLabels: 'rastertiles/voyager_nolabels',
				VoyagerOnlyLabels: 'rastertiles/voyager_only_labels',
				VoyagerLabelsUnder: 'rastertiles/voyager_labels_under'
			}
		},
		HikeBike: {
			url: 'https://tiles.wmflabs.org/{variant}/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution: '{attribution.OpenStreetMap}',
				variant: 'hikebike'
			},
			variants: {
				HikeBike: {},
				HillShading: {
					options: {
						maxZoom: 15,
						variant: 'hillshading'
					}
				}
			}
		},
		BasemapAT: {
			url: 'https://maps{s}.wien.gv.at/basemap/{variant}/normal/google3857/{z}/{y}/{x}.{format}',
			options: {
				maxZoom: 19,
				attribution: 'Datenquelle: &lt;a href=&quot;https://www.basemap.at&quot;&gt;basemap.at&lt;/a&gt;',
				subdomains: ['', '1', '2', '3', '4'],
				format: 'png',
				bounds: [[46.358770, 8.782379], [49.037872, 17.189532]],
				variant: 'geolandbasemap'
			},
			variants: {
				basemap: {
					options: {
						maxZoom: 20, // currently only in Vienna
						variant: 'geolandbasemap'
					}
				},
				grau: 'bmapgrau',
				overlay: 'bmapoverlay',
				highdpi: {
					options: {
						variant: 'bmaphidpi',
						format: 'jpeg'
					}
				},
				orthofoto: {
					options: {
						maxZoom: 20, // currently only in Vienna
						variant: 'bmaporthofoto30cm',
						format: 'jpeg'
					}
				}
			}
		},
		nlmaps: {
			url: 'https://geodata.nationaalgeoregister.nl/tiles/service/wmts/{variant}/EPSG:3857/{z}/{x}/{y}.png',
			options: {
				minZoom: 6,
				maxZoom: 19,
				bounds: [[50.5, 3.25], [54, 7.6]],
				attribution: 'Kaartgegevens &amp;copy; &lt;a href=&quot;kadaster.nl&quot;&gt;Kadaster&lt;/a&gt;'
			},
			variants: {
				'standaard': 'brtachtergrondkaart',
				'pastel': 'brtachtergrondkaartpastel',
				'grijs': 'brtachtergrondkaartgrijs',
				'luchtfoto': {
					'url': 'https://geodata.nationaalgeoregister.nl/luchtfoto/rgb/wmts/1.0.0/2016_ortho25/EPSG:3857/{z}/{x}/{y}.png',
				}
			}
		},
		NASAGIBS: {
			url: 'https://map1.vis.earthdata.nasa.gov/wmts-webmerc/{variant}/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}',
			options: {
				attribution:
					'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System ' +
					'(&lt;a href=&quot;https://earthdata.nasa.gov&quot;&gt;ESDIS&lt;/a&gt;) with funding provided by NASA/HQ.',
				bounds: [[-85.0511287776, -179.999999975], [85.0511287776, 179.999999975]],
				minZoom: 1,
				maxZoom: 9,
				format: 'jpg',
				time: '',
				tilematrixset: 'GoogleMapsCompatible_Level'
			},
			variants: {
				ModisTerraTrueColorCR: 'MODIS_Terra_CorrectedReflectance_TrueColor',
				ModisTerraBands367CR: 'MODIS_Terra_CorrectedReflectance_Bands367',
				ViirsEarthAtNight2012: {
					options: {
						variant: 'VIIRS_CityLights_2012',
						maxZoom: 8
					}
				},
				ModisTerraLSTDay: {
					options: {
						variant: 'MODIS_Terra_Land_Surface_Temp_Day',
						format: 'png',
						maxZoom: 7,
						opacity: 0.75
					}
				},
				ModisTerraSnowCover: {
					options: {
						variant: 'MODIS_Terra_Snow_Cover',
						format: 'png',
						maxZoom: 8,
						opacity: 0.75
					}
				},
				ModisTerraAOD: {
					options: {
						variant: 'MODIS_Terra_Aerosol',
						format: 'png',
						maxZoom: 6,
						opacity: 0.75
					}
				},
				ModisTerraChlorophyll: {
					options: {
						variant: 'MODIS_Terra_Chlorophyll_A',
						format: 'png',
						maxZoom: 7,
						opacity: 0.75
					}
				}
			}
		},
		NLS: {
			// NLS maps are copyright National library of Scotland.
			// http://maps.nls.uk/projects/api/index.html
			// Please contact NLS for anything other than non-commercial low volume usage
			//
			// Map sources: Ordnance Survey 1:1m to 1:63K, 1920s-1940s
			//   z0-9  - 1:1m
			//  z10-11 - quarter inch (1:253440)
			//  z12-18 - one inch (1:63360)
			url: 'https://nls-{s}.tileserver.com/nls/{z}/{x}/{y}.jpg',
			options: {
				attribution: '&lt;a href=&quot;http://geo.nls.uk/maps/&quot;&gt;National Library of Scotland Historic Maps&lt;/a&gt;',
				bounds: [[49.6, -12], [61.7, 3]],
				minZoom: 1,
				maxZoom: 18,
				subdomains: '0123',
			}
		},
		JusticeMap: {
			// Justice Map (http://www.justicemap.org/)
			// Visualize race and income data for your community, county and country.
			// Includes tools for data journalists, bloggers and community activists.
			url: 'http://www.justicemap.org/tile/{size}/{variant}/{z}/{x}/{y}.png',
			options: {
				attribution: '&lt;a href=&quot;http://www.justicemap.org/terms.php&quot;&gt;Justice Map&lt;/a&gt;',
				// one of 'county', 'tract', 'block'
				size: 'county',
				// Bounds for USA, including Alaska and Hawaii
				bounds: [[14, -180], [72, -56]]
			},
			variants: {
				income: 'income',
				americanIndian: 'indian',
				asian: 'asian',
				black: 'black',
				hispanic: 'hispanic',
				multi: 'multi',
				nonWhite: 'nonwhite',
				white: 'white',
				plurality: 'plural'
			}
		},
		Wikimedia: {
			url: 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}{r}.png',
			options: {
				attribution: '&lt;a href=&quot;https://wikimediafoundation.org/wiki/Maps_Terms_of_Use&quot;&gt;Wikimedia&lt;/a&gt;',
				minZoom: 1,
				maxZoom: 19
			}
		},
		GeoportailFrance: {
			url: 'https://wxs.ign.fr/{apikey}/geoportail/wmts?REQUEST=GetTile&amp;SERVICE=WMTS&amp;VERSION=1.0.0&amp;STYLE={style}&amp;TILEMATRIXSET=PM&amp;FORMAT={format}&amp;LAYER={variant}&amp;TILEMATRIX={z}&amp;TILEROW={y}&amp;TILECOL={x}',
			options: {
				attribution: '&lt;a target=&quot;_blank&quot; href=&quot;https://www.geoportail.gouv.fr/&quot;&gt;Geoportail France&lt;/a&gt;',
				bounds: [[-75, -180], [81, 180]],
				minZoom: 2,
				maxZoom: 18,
				// Get your own geoportail apikey here : http://professionnels.ign.fr/ign/contrats/
				// NB : 'choisirgeoportail' is a demonstration key that comes with no guarantee
				apikey: 'choisirgeoportail',
				format: 'image/jpeg',
				style : 'normal',
				variant: 'GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN-EXPRESS.STANDARD'
			},
			variants: {
				parcels: {
					options : {
						variant: 'CADASTRALPARCELS.PARCELS',
						maxZoom: 20,
						style : 'bdparcellaire',
						format: 'image/png'
					}
				},
				ignMaps: 'GEOGRAPHICALGRIDSYSTEMS.MAPS',
				maps: 'GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN-EXPRESS.STANDARD',
				orthos: {
					options: {
						maxZoom: 19,
						variant: 'ORTHOIMAGERY.ORTHOPHOTOS'
					}
				}
			}
		},
		OneMapSG: {
			url: 'https://maps-{s}.onemap.sg/v3/{variant}/{z}/{x}/{y}.png',
			options: {
				variant: 'Default',
				minZoom: 11,
				maxZoom: 18,
				bounds: [[1.56073, 104.11475], [1.16, 103.502]],
				attribution: '&lt;img src=&quot;https://docs.onemap.sg/maps/images/oneMap64-01.png&quot; style=&quot;height:20px;width:20px;&quot;/&gt; New OneMap | Map data &amp;copy; contributors, &lt;a href=&quot;http://SLA.gov.sg&quot;&gt;Singapore Land Authority&lt;/a&gt;'
			},
			variants: {
				Default: 'Default',
				Night: 'Night',
				Original: 'Original',
				Grey: 'Grey',
				LandLot: 'LandLot'
			}
		}
	};

	L.tileLayer.provider = function (provider, options) {
		return new L.TileLayer.Provider(provider, options);
	};

	return L;
}));
`;
            if(!document.getElementById(provEl.id)){
                 document.head.appendChild(provEl);        
            }
            createMap();
            }
        esriEl.src = esriLeafletCdn + &quot;esri-leaflet.js&quot;;
        addToHeadIfNotLoaded(esriEl);
        };
    leafletJsEl.src = leafletCdn + &quot;leaflet.js&quot;;
    addToHeadIfNotLoaded(leafletJsEl);
})();
&lt;/script&gt;

&lt;div id=&quot;leaflet-map-115dd77eab450a57e47dc76ab206b281&quot; class=&quot;leaflet-map&quot;&gt;&lt;/div&gt;
&lt;script&gt;
(() =&gt; {
    //Config section
    var leafletCdn = &quot;https://unpkg.com/leaflet@1.5.1/dist/&quot;;
    var esriLeafletCdn = &quot;https://unpkg.com/esri-leaflet/dist/&quot;;

    var leafletCssId = &quot;leaflet-css-head&quot;;
    var leafletJsId = &quot;leaflet-js-head&quot;;
    var esriLeafletJsId = &quot;esri-leaflet-js-head&quot;;
    var leafletProvidersJsId = &quot;leaflet-providers-js-head&quot;;

    var tagInputArg = {&quot;spam&quot;: &quot;eggs&quot;} ;
    var defaultMapElId = &quot;leaflet-map-115dd77eab450a57e47dc76ab206b281&quot;;
    var defaultMapElStyle = &quot;height:300px; margin:15px&quot;;
    var mapEl = document.getElementById(defaultMapElId);
    if('div_id' in tagInputArg){
        mapEl.id = tagInputArg['div_id'];
    }
    var mapCssEl = document.createElement(&quot;style&quot;);
    mapCssEl.innerHTML = &quot;#&quot; + defaultMapElId + &quot;{&quot; + defaultMapElStyle + &quot;}&quot;;
    document.head.appendChild(mapCssEl);

    function _createMap(){
        console.log(&quot;Creating map 115dd77eab450a57e47dc76ab206b281..&quot;);
        var map = L.map(mapEl.id).setView([0,0], 3);
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
        var leaflet_item_jsons = [
{&quot;type&quot;: &quot;LeafletFeature&quot;, &quot;id&quot;: &quot;bba34bdc4&quot;, &quot;value&quot;: {&quot;foo&quot; : &quot;bar&quot;}},
];
        for(var i=0; i&lt;leaflet_item_jsons.length; i++){
            var leaflet_item = leaflet_item_jsons[i];
            console.log(&quot;Leaflet item #&quot; + i);
            console.log(leaflet_item);
        }
    }

    function createMap(){
        var prevOnLoad;
        if(window.onload){
            prevOnLoad = window.onload;
        }
        window.onload = () =&gt; {
            _createMap();
            if(prevOnLoad){
                prevOnLoad();
            }
        }
    }

    //Load the correct elements by adding to head: when ready, call createMap()

    // Add the CSS first, don't worry about when it loads
    var leafletCssEl = document.createElement(&quot;link&quot;);
    leafletCssEl.id = leafletCssId;
    leafletCssEl.rel = &quot;stylesheet&quot;;
    leafletCssEl.href = leafletCdn + &quot;leaflet.css&quot;;
    if(!document.getElementById(leafletCssEl.id)){
        document.head.appendChild(leafletCssEl);
    }

    function addToHeadIfNotLoaded(el) {
        //Add the el to the head if it doesn't exist already. If it does, every
        //thing we need is already loaded, so draw the map
        if(!document.getElementById(el.id)){
            document.head.appendChild(el);
        } else {
            createMap();
        }
    }

    // Load the main leaflet.js code, wait for it to load
    var leafletJsEl = document.createElement(&quot;script&quot;);
    leafletJsEl.id = leafletJsId;
    leafletJsEl.onload = () =&gt; {
        //After loaded, load the esri-leaflet.js code, wait for it to load
        var esriEl = document.createElement(&quot;script&quot;);
        esriEl.id = esriLeafletJsId;
        esriEl.onload = () =&gt; {
            //After loaded, add the leaflet-providers &lt;script&gt;, don't wait to load
            provEl = document.createElement(&quot;script&quot;);
            provEl.id = leafletProvidersJsId;
            provEl.innerHTML = `//Taken from https://github.com/leaflet-extras/leaflet-providers
(function (root, factory) {
	if (typeof define === 'function' &amp;&amp; define.amd) {
		// AMD. Register as an anonymous module.
		define(['leaflet'], factory);
	} else if (typeof modules === 'object' &amp;&amp; module.exports) {
		// define a Common JS module that relies on 'leaflet'
		module.exports = factory(require('leaflet'));
	} else {
		// Assume Leaflet is loaded into global object L already
		factory(L);
	}
}(this, function (L) {
	'use strict';

	L.TileLayer.Provider = L.TileLayer.extend({
		initialize: function (arg, options) {
			var providers = L.TileLayer.Provider.providers;

			var parts = arg.split('.');

			var providerName = parts[0];
			var variantName = parts[1];

			if (!providers[providerName]) {
				throw 'No such provider (' + providerName + ')';
			}

			var provider = {
				url: providers[providerName].url,
				options: providers[providerName].options
			};

			// overwrite values in provider from variant.
			if (variantName &amp;&amp; 'variants' in providers[providerName]) {
				if (!(variantName in providers[providerName].variants)) {
					throw 'No such variant of ' + providerName + ' (' + variantName + ')';
				}
				var variant = providers[providerName].variants[variantName];
				var variantOptions;
				if (typeof variant === 'string') {
					variantOptions = {
						variant: variant
					};
				} else {
					variantOptions = variant.options;
				}
				provider = {
					url: variant.url || provider.url,
					options: L.Util.extend({}, provider.options, variantOptions)
				};
			}

			// replace attribution placeholders with their values from toplevel provider attribution,
			// recursively
			var attributionReplacer = function (attr) {
				if (attr.indexOf('{attribution.') === -1) {
					return attr;
				}
				return attr.replace(/\{attribution.(\w*)\}/g,
					function (match, attributionName) {
						return attributionReplacer(providers[attributionName].options.attribution);
					}
				);
			};
			provider.options.attribution = attributionReplacer(provider.options.attribution);

			// Compute final options combining provider options with any user overrides
			var layerOpts = L.Util.extend({}, provider.options, options);
			L.TileLayer.prototype.initialize.call(this, provider.url, layerOpts);
		}
	});

	/**
	 * Definition of providers.
	 * see http://leafletjs.com/reference.html#tilelayer for options in the options map.
	 */

	L.TileLayer.Provider.providers = {
		OpenStreetMap: {
			url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution:
					'&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors'
			},
			variants: {
				Mapnik: {},
				DE: {
					url: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',
					options: {
						maxZoom: 18
					}
				},
				CH: {
					url: 'https://tile.osm.ch/switzerland/{z}/{x}/{y}.png',
					options: {
						maxZoom: 18,
						bounds: [[45, 5], [48, 11]]
					}
				},
				France: {
					url: 'https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png',
					options: {
						maxZoom: 20,
						attribution: '&amp;copy; Openstreetmap France | {attribution.OpenStreetMap}'
					}
				},
				HOT: {
					url: 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
					options: {
						attribution:
							'{attribution.OpenStreetMap}, ' +
							'Tiles style by &lt;a href=&quot;https://www.hotosm.org/&quot; target=&quot;_blank&quot;&gt;Humanitarian OpenStreetMap Team&lt;/a&gt; ' +
							'hosted by &lt;a href=&quot;https://openstreetmap.fr/&quot; target=&quot;_blank&quot;&gt;OpenStreetMap France&lt;/a&gt;'
					}
				},
				BZH: {
					url: 'https://tile.openstreetmap.bzh/br/{z}/{x}/{y}.png',
					options: {
						attribution: '{attribution.OpenStreetMap}, Tiles courtesy of &lt;a href=&quot;http://www.openstreetmap.bzh/&quot; target=&quot;_blank&quot;&gt;Breton OpenStreetMap Team&lt;/a&gt;',
						bounds: [[46.2, -5.5], [50, 0.7]]
					}
				}
			}
		},
		OpenSeaMap: {
			url: 'https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png',
			options: {
				attribution: 'Map data: &amp;copy; &lt;a href=&quot;http://www.openseamap.org&quot;&gt;OpenSeaMap&lt;/a&gt; contributors'
			}
		},
		OpenPtMap: {
			url: 'http://openptmap.org/tiles/{z}/{x}/{y}.png',
			options: {
				maxZoom: 17,
				attribution: 'Map data: &amp;copy; &lt;a href=&quot;http://www.openptmap.org&quot;&gt;OpenPtMap&lt;/a&gt; contributors'
			}
		},
		OpenTopoMap: {
			url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
			options: {
				maxZoom: 17,
				attribution: 'Map data: {attribution.OpenStreetMap}, &lt;a href=&quot;http://viewfinderpanoramas.org&quot;&gt;SRTM&lt;/a&gt; | Map style: &amp;copy; &lt;a href=&quot;https://opentopomap.org&quot;&gt;OpenTopoMap&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		OpenRailwayMap: {
			url: 'https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution: 'Map data: {attribution.OpenStreetMap} | Map style: &amp;copy; &lt;a href=&quot;https://www.OpenRailwayMap.org&quot;&gt;OpenRailwayMap&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		OpenFireMap: {
			url: 'http://openfiremap.org/hytiles/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution: 'Map data: {attribution.OpenStreetMap} | Map style: &amp;copy; &lt;a href=&quot;http://www.openfiremap.org&quot;&gt;OpenFireMap&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		SafeCast: {
			url: 'https://s3.amazonaws.com/te512.safecast.org/{z}/{x}/{y}.png',
			options: {
				maxZoom: 16,
				attribution: 'Map data: {attribution.OpenStreetMap} | Map style: &amp;copy; &lt;a href=&quot;https://blog.safecast.org/about/&quot;&gt;SafeCast&lt;/a&gt; (&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC-BY-SA&lt;/a&gt;)'
			}
		},
		Thunderforest: {
			url: 'https://{s}.tile.thunderforest.com/{variant}/{z}/{x}/{y}.png?apikey={apikey}',
			options: {
				attribution:
					'&amp;copy; &lt;a href=&quot;http://www.thunderforest.com/&quot;&gt;Thunderforest&lt;/a&gt;, {attribution.OpenStreetMap}',
				variant: 'cycle',
				apikey: '&lt;insert your api key here&gt;',
				maxZoom: 22
			},
			variants: {
				OpenCycleMap: 'cycle',
				Transport: {
					options: {
						variant: 'transport'
					}
				},
				TransportDark: {
					options: {
						variant: 'transport-dark'
					}
				},
				SpinalMap: {
					options: {
						variant: 'spinal-map'
					}
				},
				Landscape: 'landscape',
				Outdoors: 'outdoors',
				Pioneer: 'pioneer'
			}
		},
		OpenMapSurfer: {
			url: 'https://maps.heigit.org/openmapsurfer/tiles/{variant}/webmercator/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				variant: 'roads',
				attribution: 'Imagery from &lt;a href=&quot;http://giscience.uni-hd.de/&quot;&gt;GIScience Research Group @ University of Heidelberg&lt;/a&gt; | Map data '
			},
			variants: {
				Roads: {
					options: {
						variant: 'roads',
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				},
				Hybrid: {
					options: {
						variant: 'hybrid',
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				},
				AdminBounds: {
					options: {
						variant: 'adminb',
						maxZoom: 18,
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				},
				ContourLines: {
					options: {
						variant: 'asterc',
						maxZoom: 18,
						minZoom: 13,
						attribution: '{attribution.OpenMapSurfer} &lt;a href=&quot;https://lpdaac.usgs.gov/products/aster_policies&quot;&gt;ASTER GDEM&lt;/a&gt;'
					}
				},
				Hillshade: {
					options: {
						variant: 'asterh',
						maxZoom: 18,
						attribution: '{attribution.OpenMapSurfer} &lt;a href=&quot;https://lpdaac.usgs.gov/products/aster_policies&quot;&gt;ASTER GDEM&lt;/a&gt;, &lt;a href=&quot;http://srtm.csi.cgiar.org/&quot;&gt;SRTM&lt;/a&gt;'
					}
				},
				ElementsAtRisk: {
					options: {
						variant: 'elements_at_risk',
						attribution: '{attribution.OpenMapSurfer}{attribution.OpenStreetMap}'
					}
				}
			}
		},
		Hydda: {
			url: 'https://{s}.tile.openstreetmap.se/hydda/{variant}/{z}/{x}/{y}.png',
			options: {
				maxZoom: 18,
				variant: 'full',
				attribution: 'Tiles courtesy of &lt;a href=&quot;http://openstreetmap.se/&quot; target=&quot;_blank&quot;&gt;OpenStreetMap Sweden&lt;/a&gt; &amp;mdash; Map data {attribution.OpenStreetMap}'
			},
			variants: {
				Full: 'full',
				Base: 'base',
				RoadsAndLabels: 'roads_and_labels'
			}
		},
		MapBox: {
			url: 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}{r}.png?access_token={accessToken}',
			options: {
				attribution:
					'&lt;a href=&quot;https://www.mapbox.com/about/maps/&quot; target=&quot;_blank&quot;&gt;&amp;copy; Mapbox&lt;/a&gt; ' +
					'{attribution.OpenStreetMap} ' +
					'&lt;a href=&quot;https://www.mapbox.com/map-feedback/&quot; target=&quot;_blank&quot;&gt;Improve this map&lt;/a&gt;',
				subdomains: 'abcd',
				id: 'mapbox.streets',
				accessToken: '&lt;insert your access token here&gt;',
			}
		},
		Stamen: {
			url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/{variant}/{z}/{x}/{y}{r}.{ext}',
			options: {
				attribution:
					'Map tiles by &lt;a href=&quot;http://stamen.com&quot;&gt;Stamen Design&lt;/a&gt;, ' +
					'&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0&quot;&gt;CC BY 3.0&lt;/a&gt; &amp;mdash; ' +
					'Map data {attribution.OpenStreetMap}',
				subdomains: 'abcd',
				minZoom: 0,
				maxZoom: 20,
				variant: 'toner',
				ext: 'png'
			},
			variants: {
				Toner: 'toner',
				TonerBackground: 'toner-background',
				TonerHybrid: 'toner-hybrid',
				TonerLines: 'toner-lines',
				TonerLabels: 'toner-labels',
				TonerLite: 'toner-lite',
				Watercolor: {
					url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/{variant}/{z}/{x}/{y}.{ext}',
					options: {
						variant: 'watercolor',
						ext: 'jpg',
						minZoom: 1,
						maxZoom: 16
					}
				},
				Terrain: {
					options: {
						variant: 'terrain',
						minZoom: 0,
						maxZoom: 18
					}
				},
				TerrainBackground: {
					options: {
						variant: 'terrain-background',
						minZoom: 0,
						maxZoom: 18
					}
				},
				TopOSMRelief: {
					url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/{variant}/{z}/{x}/{y}.{ext}',
					options: {
						variant: 'toposm-color-relief',
						ext: 'jpg',
						bounds: [[22, -132], [51, -56]]
					}
				},
				TopOSMFeatures: {
					options: {
						variant: 'toposm-features',
						bounds: [[22, -132], [51, -56]],
						opacity: 0.9
					}
				}
			}
		},
		Esri: {
			url: 'https://server.arcgisonline.com/ArcGIS/rest/services/{variant}/MapServer/tile/{z}/{y}/{x}',
			options: {
				variant: 'World_Street_Map',
				attribution: 'Tiles &amp;copy; Esri'
			},
			variants: {
				WorldStreetMap: {
					options: {
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
					}
				},
				DeLorme: {
					options: {
						variant: 'Specialty/DeLorme_World_Base_Map',
						minZoom: 1,
						maxZoom: 11,
						attribution: '{attribution.Esri} &amp;mdash; Copyright: &amp;copy;2012 DeLorme'
					}
				},
				WorldTopoMap: {
					options: {
						variant: 'World_Topo_Map',
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
					}
				},
				WorldImagery: {
					options: {
						variant: 'World_Imagery',
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
					}
				},
				WorldTerrain: {
					options: {
						variant: 'World_Terrain_Base',
						maxZoom: 13,
						attribution:
							'{attribution.Esri} &amp;mdash; ' +
							'Source: USGS, Esri, TANA, DeLorme, and NPS'
					}
				},
				WorldShadedRelief: {
					options: {
						variant: 'World_Shaded_Relief',
						maxZoom: 13,
						attribution: '{attribution.Esri} &amp;mdash; Source: Esri'
					}
				},
				WorldPhysical: {
					options: {
						variant: 'World_Physical_Map',
						maxZoom: 8,
						attribution: '{attribution.Esri} &amp;mdash; Source: US National Park Service'
					}
				},
				OceanBasemap: {
					options: {
						variant: 'Ocean_Basemap',
						maxZoom: 13,
						attribution: '{attribution.Esri} &amp;mdash; Sources: GEBCO, NOAA, CHS, OSU, UNH, CSUMB, National Geographic, DeLorme, NAVTEQ, and Esri'
					}
				},
				NatGeoWorldMap: {
					options: {
						variant: 'NatGeo_World_Map',
						maxZoom: 16,
						attribution: '{attribution.Esri} &amp;mdash; National Geographic, Esri, DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, GEBCO, NOAA, iPC'
					}
				},
				WorldGrayCanvas: {
					options: {
						variant: 'Canvas/World_Light_Gray_Base',
						maxZoom: 16,
						attribution: '{attribution.Esri} &amp;mdash; Esri, DeLorme, NAVTEQ'
					}
				}
			}
		},
		OpenWeatherMap: {
			url: 'http://{s}.tile.openweathermap.org/map/{variant}/{z}/{x}/{y}.png?appid={apiKey}',
			options: {
				maxZoom: 19,
				attribution: 'Map data &amp;copy; &lt;a href=&quot;http://openweathermap.org&quot;&gt;OpenWeatherMap&lt;/a&gt;',
				apiKey:'&lt;insert your api key here&gt;',
				opacity: 0.5
			},
			variants: {
				Clouds: 'clouds',
				CloudsClassic: 'clouds_cls',
				Precipitation: 'precipitation',
				PrecipitationClassic: 'precipitation_cls',
				Rain: 'rain',
				RainClassic: 'rain_cls',
				Pressure: 'pressure',
				PressureContour: 'pressure_cntr',
				Wind: 'wind',
				Temperature: 'temp',
				Snow: 'snow'
			}
		},
		HERE: {
			/*
			 * HERE maps, formerly Nokia maps.
			 * These basemaps are free, but you need an API key. Please sign up at
			 * https://developer.here.com/plans
			 */
			url:
				'https://{s}.{base}.maps.api.here.com/maptile/2.1/' +
				'{type}/{mapID}/{variant}/{z}/{x}/{y}/{size}/{format}?' +
				'app_id={app_id}&amp;app_code={app_code}&amp;lg={language}',
			options: {
				attribution:
					'Map &amp;copy; 1987-' + new Date().getFullYear() + ' &lt;a href=&quot;http://developer.here.com&quot;&gt;HERE&lt;/a&gt;',
				subdomains: '1234',
				mapID: 'newest',
				'app_id': '&lt;insert your app_id here&gt;',
				'app_code': '&lt;insert your app_code here&gt;',
				base: 'base',
				variant: 'normal.day',
				maxZoom: 20,
				type: 'maptile',
				language: 'eng',
				format: 'png8',
				size: '256'
			},
			variants: {
				normalDay: 'normal.day',
				normalDayCustom: 'normal.day.custom',
				normalDayGrey: 'normal.day.grey',
				normalDayMobile: 'normal.day.mobile',
				normalDayGreyMobile: 'normal.day.grey.mobile',
				normalDayTransit: 'normal.day.transit',
				normalDayTransitMobile: 'normal.day.transit.mobile',
				normalNight: 'normal.night',
				normalNightMobile: 'normal.night.mobile',
				normalNightGrey: 'normal.night.grey',
				normalNightGreyMobile: 'normal.night.grey.mobile',
				normalNightTransit: 'normal.night.transit',
				normalNightTransitMobile: 'normal.night.transit.mobile',
				reducedDay: 'reduced.day',
				reducedNight: 'reduced.night',
				basicMap: {
					options: {
						type: 'basetile'
					}
				},
				mapLabels: {
					options: {
						type: 'labeltile',
						format: 'png'
					}
				},
				trafficFlow: {
					options: {
						base: 'traffic',
						type: 'flowtile'
					}
				},
				carnavDayGrey: 'carnav.day.grey',
				hybridDay: {
					options: {
						base: 'aerial',
						variant: 'hybrid.day'
					}
				},
				hybridDayMobile: {
					options: {
						base: 'aerial',
						variant: 'hybrid.day.mobile'
					}
				},
				hybridDayTransit: {
					options: {
						base: 'aerial',
						variant: 'hybrid.day.transit'
					}
				},
				hybridDayGrey: {
					options: {
						base: 'aerial',
						variant: 'hybrid.grey.day'
					}
				},
				pedestrianDay: 'pedestrian.day',
				pedestrianNight: 'pedestrian.night',
				satelliteDay: {
					options: {
						base: 'aerial',
						variant: 'satellite.day'
					}
				},
				terrainDay: {
					options: {
						base: 'aerial',
						variant: 'terrain.day'
					}
				},
				terrainDayMobile: {
					options: {
						base: 'aerial',
						variant: 'terrain.day.mobile'
					}
				}
			}
		},
		FreeMapSK: {
			url: 'http://t{s}.freemap.sk/T/{z}/{x}/{y}.jpeg',
			options: {
				minZoom: 8,
				maxZoom: 16,
				subdomains: '1234',
				bounds: [[47.204642, 15.996093], [49.830896, 22.576904]],
				attribution:
					'{attribution.OpenStreetMap}, vizualization CC-By-SA 2.0 &lt;a href=&quot;http://freemap.sk&quot;&gt;Freemap.sk&lt;/a&gt;'
			}
		},
		MtbMap: {
			url: 'http://tile.mtbmap.cz/mtbmap_tiles/{z}/{x}/{y}.png',
			options: {
				attribution:
					'{attribution.OpenStreetMap} &amp;amp; USGS'
			}
		},
		CartoDB: {
			url: 'https://{s}.basemaps.cartocdn.com/{variant}/{z}/{x}/{y}{r}.png',
			options: {
				attribution: '{attribution.OpenStreetMap} &amp;copy; &lt;a href=&quot;https://carto.com/attributions&quot;&gt;CARTO&lt;/a&gt;',
				subdomains: 'abcd',
				maxZoom: 19,
				variant: 'light_all'
			},
			variants: {
				Positron: 'light_all',
				PositronNoLabels: 'light_nolabels',
				PositronOnlyLabels: 'light_only_labels',
				DarkMatter: 'dark_all',
				DarkMatterNoLabels: 'dark_nolabels',
				DarkMatterOnlyLabels: 'dark_only_labels',
				Voyager: 'rastertiles/voyager',
				VoyagerNoLabels: 'rastertiles/voyager_nolabels',
				VoyagerOnlyLabels: 'rastertiles/voyager_only_labels',
				VoyagerLabelsUnder: 'rastertiles/voyager_labels_under'
			}
		},
		HikeBike: {
			url: 'https://tiles.wmflabs.org/{variant}/{z}/{x}/{y}.png',
			options: {
				maxZoom: 19,
				attribution: '{attribution.OpenStreetMap}',
				variant: 'hikebike'
			},
			variants: {
				HikeBike: {},
				HillShading: {
					options: {
						maxZoom: 15,
						variant: 'hillshading'
					}
				}
			}
		},
		BasemapAT: {
			url: 'https://maps{s}.wien.gv.at/basemap/{variant}/normal/google3857/{z}/{y}/{x}.{format}',
			options: {
				maxZoom: 19,
				attribution: 'Datenquelle: &lt;a href=&quot;https://www.basemap.at&quot;&gt;basemap.at&lt;/a&gt;',
				subdomains: ['', '1', '2', '3', '4'],
				format: 'png',
				bounds: [[46.358770, 8.782379], [49.037872, 17.189532]],
				variant: 'geolandbasemap'
			},
			variants: {
				basemap: {
					options: {
						maxZoom: 20, // currently only in Vienna
						variant: 'geolandbasemap'
					}
				},
				grau: 'bmapgrau',
				overlay: 'bmapoverlay',
				highdpi: {
					options: {
						variant: 'bmaphidpi',
						format: 'jpeg'
					}
				},
				orthofoto: {
					options: {
						maxZoom: 20, // currently only in Vienna
						variant: 'bmaporthofoto30cm',
						format: 'jpeg'
					}
				}
			}
		},
		nlmaps: {
			url: 'https://geodata.nationaalgeoregister.nl/tiles/service/wmts/{variant}/EPSG:3857/{z}/{x}/{y}.png',
			options: {
				minZoom: 6,
				maxZoom: 19,
				bounds: [[50.5, 3.25], [54, 7.6]],
				attribution: 'Kaartgegevens &amp;copy; &lt;a href=&quot;kadaster.nl&quot;&gt;Kadaster&lt;/a&gt;'
			},
			variants: {
				'standaard': 'brtachtergrondkaart',
				'pastel': 'brtachtergrondkaartpastel',
				'grijs': 'brtachtergrondkaartgrijs',
				'luchtfoto': {
					'url': 'https://geodata.nationaalgeoregister.nl/luchtfoto/rgb/wmts/1.0.0/2016_ortho25/EPSG:3857/{z}/{x}/{y}.png',
				}
			}
		},
		NASAGIBS: {
			url: 'https://map1.vis.earthdata.nasa.gov/wmts-webmerc/{variant}/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}',
			options: {
				attribution:
					'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System ' +
					'(&lt;a href=&quot;https://earthdata.nasa.gov&quot;&gt;ESDIS&lt;/a&gt;) with funding provided by NASA/HQ.',
				bounds: [[-85.0511287776, -179.999999975], [85.0511287776, 179.999999975]],
				minZoom: 1,
				maxZoom: 9,
				format: 'jpg',
				time: '',
				tilematrixset: 'GoogleMapsCompatible_Level'
			},
			variants: {
				ModisTerraTrueColorCR: 'MODIS_Terra_CorrectedReflectance_TrueColor',
				ModisTerraBands367CR: 'MODIS_Terra_CorrectedReflectance_Bands367',
				ViirsEarthAtNight2012: {
					options: {
						variant: 'VIIRS_CityLights_2012',
						maxZoom: 8
					}
				},
				ModisTerraLSTDay: {
					options: {
						variant: 'MODIS_Terra_Land_Surface_Temp_Day',
						format: 'png',
						maxZoom: 7,
						opacity: 0.75
					}
				},
				ModisTerraSnowCover: {
					options: {
						variant: 'MODIS_Terra_Snow_Cover',
						format: 'png',
						maxZoom: 8,
						opacity: 0.75
					}
				},
				ModisTerraAOD: {
					options: {
						variant: 'MODIS_Terra_Aerosol',
						format: 'png',
						maxZoom: 6,
						opacity: 0.75
					}
				},
				ModisTerraChlorophyll: {
					options: {
						variant: 'MODIS_Terra_Chlorophyll_A',
						format: 'png',
						maxZoom: 7,
						opacity: 0.75
					}
				}
			}
		},
		NLS: {
			// NLS maps are copyright National library of Scotland.
			// http://maps.nls.uk/projects/api/index.html
			// Please contact NLS for anything other than non-commercial low volume usage
			//
			// Map sources: Ordnance Survey 1:1m to 1:63K, 1920s-1940s
			//   z0-9  - 1:1m
			//  z10-11 - quarter inch (1:253440)
			//  z12-18 - one inch (1:63360)
			url: 'https://nls-{s}.tileserver.com/nls/{z}/{x}/{y}.jpg',
			options: {
				attribution: '&lt;a href=&quot;http://geo.nls.uk/maps/&quot;&gt;National Library of Scotland Historic Maps&lt;/a&gt;',
				bounds: [[49.6, -12], [61.7, 3]],
				minZoom: 1,
				maxZoom: 18,
				subdomains: '0123',
			}
		},
		JusticeMap: {
			// Justice Map (http://www.justicemap.org/)
			// Visualize race and income data for your community, county and country.
			// Includes tools for data journalists, bloggers and community activists.
			url: 'http://www.justicemap.org/tile/{size}/{variant}/{z}/{x}/{y}.png',
			options: {
				attribution: '&lt;a href=&quot;http://www.justicemap.org/terms.php&quot;&gt;Justice Map&lt;/a&gt;',
				// one of 'county', 'tract', 'block'
				size: 'county',
				// Bounds for USA, including Alaska and Hawaii
				bounds: [[14, -180], [72, -56]]
			},
			variants: {
				income: 'income',
				americanIndian: 'indian',
				asian: 'asian',
				black: 'black',
				hispanic: 'hispanic',
				multi: 'multi',
				nonWhite: 'nonwhite',
				white: 'white',
				plurality: 'plural'
			}
		},
		Wikimedia: {
			url: 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}{r}.png',
			options: {
				attribution: '&lt;a href=&quot;https://wikimediafoundation.org/wiki/Maps_Terms_of_Use&quot;&gt;Wikimedia&lt;/a&gt;',
				minZoom: 1,
				maxZoom: 19
			}
		},
		GeoportailFrance: {
			url: 'https://wxs.ign.fr/{apikey}/geoportail/wmts?REQUEST=GetTile&amp;SERVICE=WMTS&amp;VERSION=1.0.0&amp;STYLE={style}&amp;TILEMATRIXSET=PM&amp;FORMAT={format}&amp;LAYER={variant}&amp;TILEMATRIX={z}&amp;TILEROW={y}&amp;TILECOL={x}',
			options: {
				attribution: '&lt;a target=&quot;_blank&quot; href=&quot;https://www.geoportail.gouv.fr/&quot;&gt;Geoportail France&lt;/a&gt;',
				bounds: [[-75, -180], [81, 180]],
				minZoom: 2,
				maxZoom: 18,
				// Get your own geoportail apikey here : http://professionnels.ign.fr/ign/contrats/
				// NB : 'choisirgeoportail' is a demonstration key that comes with no guarantee
				apikey: 'choisirgeoportail',
				format: 'image/jpeg',
				style : 'normal',
				variant: 'GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN-EXPRESS.STANDARD'
			},
			variants: {
				parcels: {
					options : {
						variant: 'CADASTRALPARCELS.PARCELS',
						maxZoom: 20,
						style : 'bdparcellaire',
						format: 'image/png'
					}
				},
				ignMaps: 'GEOGRAPHICALGRIDSYSTEMS.MAPS',
				maps: 'GEOGRAPHICALGRIDSYSTEMS.MAPS.SCAN-EXPRESS.STANDARD',
				orthos: {
					options: {
						maxZoom: 19,
						variant: 'ORTHOIMAGERY.ORTHOPHOTOS'
					}
				}
			}
		},
		OneMapSG: {
			url: 'https://maps-{s}.onemap.sg/v3/{variant}/{z}/{x}/{y}.png',
			options: {
				variant: 'Default',
				minZoom: 11,
				maxZoom: 18,
				bounds: [[1.56073, 104.11475], [1.16, 103.502]],
				attribution: '&lt;img src=&quot;https://docs.onemap.sg/maps/images/oneMap64-01.png&quot; style=&quot;height:20px;width:20px;&quot;/&gt; New OneMap | Map data &amp;copy; contributors, &lt;a href=&quot;http://SLA.gov.sg&quot;&gt;Singapore Land Authority&lt;/a&gt;'
			},
			variants: {
				Default: 'Default',
				Night: 'Night',
				Original: 'Original',
				Grey: 'Grey',
				LandLot: 'LandLot'
			}
		}
	};

	L.tileLayer.provider = function (provider, options) {
		return new L.TileLayer.Provider(provider, options);
	};

	return L;
}));
`;
            if(!document.getElementById(provEl.id)){
                 document.head.appendChild(provEl);        
            }
            createMap();
            }
        esriEl.src = esriLeafletCdn + &quot;esri-leaflet.js&quot;;
        addToHeadIfNotLoaded(esriEl);
        };
    leafletJsEl.src = leafletCdn + &quot;leaflet.js&quot;;
    addToHeadIfNotLoaded(leafletJsEl);
})();
&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Retrospective</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/retrospective" rel="alternate" type="text/html" title="Retrospective" /><published>2019-05-22T01:00:00-07:00</published><updated>2019-05-22T01:00:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/retrospective</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/retrospective">&lt;p&gt;Two years ago today, I left on a once-in-a-lifetime roadtrip to Alaska with great friends Kevin, Isaac, and Joey. We drove to from Chicago to Alaska and back, stopping at many amazing locations along the way. I took pictures and captured my thoughts &lt;a href=&quot;/blog/travel/alaska-roadtrip/&quot;&gt;in a blog&lt;/a&gt; along the way, but never wrote a proper retrospective for my trip.&lt;/p&gt;

&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [56, -132],
        3);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((56 === 0) &amp;&amp; 
                       (-132 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = {};
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Yellowstone National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-110.723183, 44.412266] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Eagle Creek&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-121.894672, 45.621595] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Multnomah Falls&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-122.115801, 45.576045] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Ape Caves&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-122.211360, 46.109579] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Flapjack Lakes, Olympic National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-123.341150, 47.560991] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Mount Rainier National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-121.727100, 46.877833] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Strathcona Provincial Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-125.598810, 49.814399] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Wrangell-St. Elias National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-142.921965, 61.448960] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Exit Glacier&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-149.649859, 60.177945] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Homer, AK&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-151.548355, 59.642815] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Denali National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-151.192224, 63.113509] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Sign Post Forest, Alaskan Highway&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-128.714362, 60.063366] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Mount Robson Provincial Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-119.229462, 53.035430] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Banff National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-115.928160, 51.495437] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Waterton-Glacier International Peace Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-113.659403, 48.995485] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Glacier National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-113.492293, 48.695363] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Saint Mary Lake&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-113.492291, 48.695373] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Black Hills National Forest&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-103.742415, 43.997541] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Custer State Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-103.454882, 43.757049] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }
var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Badlands National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-102.339920, 43.854480] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            
        addGeoJSONToMap(geojson[i], );
        }
    } else {
    addGeoJSONToMap(geojson, );
    }

&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each point on the map above represents a stop on our trip and contains a link to the original blog post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;south-dakota-montana&quot;&gt;South Dakota, Montana&lt;/h2&gt;

&lt;p&gt;Our first stop was the Badlands in South Dakota, we climbed up some rock formations and saw some wild mountain goats. We then went to the Black Hills in South Dakota, where we saw Mt. Rushmore and some wild bison. We then backpacked in Glacier National Park, where we witnessed unbelievable sites, pristine water, and breathtaking countryside.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/dude-ranch-2.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/dude-ranch-2.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/travel-glacier-4.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/travel-glacier-4.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/end-glacier-5.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/end-glacier-5.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;alberta-british-columbia&quot;&gt;Alberta, British Columbia&lt;/h2&gt;

&lt;p&gt;We then crossed the border and spent a few days in Banff. We originally planned to do Jasper after, but a park ranger convinced us to do Mount Robson instead. I’m so glad we did that, Mount Robson was one of the best unplanned parts of the trip.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/banff-1.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/banff-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/robson-1.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/robson-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;alaska&quot;&gt;Alaska&lt;/h2&gt;

&lt;p&gt;After driving ~30 hours from Edmonton to Alaska, we had finally arrived in Alaska, where we visited Denali, Wrangell-St. Elias, Exit Glacier, and a few other places. The absolute highlight of the trip for me was our backpacking in Denali. There is no development at all, just raw nature. It was an unreal experience.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-1.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/exit-2.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/exit-2.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-1.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;washington-state-oregon-wyoming&quot;&gt;Washington State, Oregon, Wyoming&lt;/h2&gt;

&lt;p&gt;We made our way down to Vancouver Island, some locations in the Pacific Northwest, and finished off in Yellowstone. All amazing stops to finish our trip off with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-1.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-1.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-2.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-2.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-5.jpg&quot;&gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-5.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reflection&quot;&gt;Reflection&lt;/h2&gt;

&lt;p&gt;As I reflect on this trip from 2 years ago, I feel very blessed for all I was able to experience with such amazing friends. Kevin, Isaac, and Joey – thanks so much for sharing this experience with me. Here’s to the next trip!&lt;/p&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html">Two years ago today, I left on a once-in-a-lifetime roadtrip to Alaska with great friends Kevin, Isaac, and Joey. We drove to from Chicago to Alaska and back, stopping at many amazing locations along the way. I took pictures and captured my thoughts in a blog along the way, but never wrote a proper retrospective for my trip.</summary></entry><entry><title type="html">Yellowstone, WY</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/yellowstone" rel="alternate" type="text/html" title="Yellowstone, WY" /><published>2017-07-02T07:49:00-07:00</published><updated>2017-07-02T07:49:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/yellowstone</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/yellowstone">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was written retroactively in 2019&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        5);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Yellowstone National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-110.723183, 44.412266] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


The final stop on our trip was the Tetons and Yellowstone national park in Wyoming. The trip was a mix of geysers, wildlife, and water falls. Above you see the valley near artist point.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-1.jpg&quot;&gt;&lt;/a&gt;


We saw the Old Faithful Geyser go off a few times, and the Grand Geyser go off once (it was huge!).

&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-2.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-3.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-4.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-4.jpg&quot;&gt;&lt;/a&gt;


We had potentially wanted to do a bit more on our trip, but after Yellowstone we decided to drive back to Maquoketa, IA to hang out with Isaac's family at the Codfish Hollow Barnstormer. Yellowstone was our last stop, and I forgot to write my last blog post. This is the last group picture we took from our incredible trip.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/yellowstone-5.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/yellowstone-5.jpg&quot;&gt;&lt;/a&gt;

&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html">Note: This post was written retroactively in 2019</summary></entry><entry><title type="html">Eagle Creek, Ape Caves, OR</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/eagle-creek-ape-caves" rel="alternate" type="text/html" title="Eagle Creek, Ape Caves, OR" /><published>2017-06-30T07:49:00-07:00</published><updated>2017-06-30T07:49:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/eagle-creek-ape-caves</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/eagle-creek-ape-caves">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        7);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Eagle Creek&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-121.894672, 45.621595] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Multnomah Falls&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-122.115801, 45.576045] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Ape Caves&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-122.211360, 46.109579] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-1.jpg&quot;&gt;&lt;/a&gt;


Our Oregon plans got changed due to a recommendation of some trail buddies we met in Olympic: thanks Jeff and Peter! It was definitely some awesome recommendations. 

We did a lot of waterfalls in Oregon: Eagle Creek has a lot, including Punch Bowl Falls. We swam in the freezing water, then went to a waterfall that you walk behind. We also briefly saw Multnomah Falls. All of it was super cool, Oregon has such a cool mixture of forests and elevation changes, I love it there. 

&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-2.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-3.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-4.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-4.jpg&quot;&gt;&lt;/a&gt;


Next we did Ape Caves, just back over the Washington Oregon border near Mt St Helen's. This was a cave formed by a week of lava flow a few thousand years ago.  Most caves form over millions of years of water erosion, so this was definitely an amazing experience. 

Next on the trip is Yellowstone and the Grand Tetons! 


&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-7.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-7.jpg&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-6.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-6.jpg&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-5.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-5.jpg&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;/assets/personal/alaska-trip-2017/oregon-8.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/oregon-8.jpg&quot;&gt;&lt;/a&gt;


&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Mt. Rainier, Olympics, WA</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/mt-rainier-olympics" rel="alternate" type="text/html" title="Mt. Rainier, Olympics, WA" /><published>2017-06-28T16:07:00-07:00</published><updated>2017-06-28T16:07:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/mt-rainier-olympics</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/mt-rainier-olympics">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        7);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Flapjack Lakes, Olympic National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-123.341150, 47.560991] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Mount Rainier National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-121.727100, 46.877833] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


&lt;a href=&quot;/assets/personal/alaska-trip-2017/rainier-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/rainier-1.jpg&quot;&gt;&lt;/a&gt;


Look at the mountain range reflected in the marmot's eye!

We spent a night in Olympic National Park at Flapjack lakes. The water was so clear, and the forest was awesome. I'd previously only been to the mountains of the Olympics before, so it was cool to see in person how diverse the giant park is.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/rainier-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/rainier-2.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/rainier-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/rainier-3.jpg&quot;&gt;&lt;/a&gt;


We also did Mt. Rainier National Park. It was like 70-80 but so snowy because of how high we were! We sled down on a big snowy Hill on our butts, which was a definite highlight. We got some awesome views and had a great time.

Next is a lot of things in Oregon! Then the Teton's, Yellowstone, and some various stuff in South Dakota.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/rainier-4.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/rainier-4.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/rainier-5.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/rainier-5.jpg&quot;&gt;&lt;/a&gt;

&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Vancouver Island, BC</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/vancouver-island" rel="alternate" type="text/html" title="Vancouver Island, BC" /><published>2017-06-23T12:19:00-07:00</published><updated>2017-06-23T12:19:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/vancouver-island</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/vancouver-island">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        7);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Strathcona Provincial Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-125.598810, 49.814399] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


We spent 2 days in Vancouver Island. One day we spent completely on the beach, where we fell asleep and got a lot of sand in our hair.

The next day we did a day hike in Strathcona Provincial Park. There was so much snow on the top of the mountain that we got lost, until a 70 year old hiking woman found us and led us to the top of the mountain. She would hike twice as fast as us, was jumping down snow piles, it was awesome. I wish I could be in an eighth of as good of shape at that age.

There was so much snow that we couldn't see much, so I only got 2 good photos.
We're in the Seattle area for the next 4-5 days, doing Olympic National Park, Mount Rainier, and visiting some family and friends of Kevin and Isaac.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/vancouver-island-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/vancouver-island-1.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/vancouver-island-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/vancouver-island-2.jpg&quot;&gt;&lt;/a&gt;



&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Wrangell, AK</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/wrangell" rel="alternate" type="text/html" title="Wrangell, AK" /><published>2017-06-17T16:07:00-07:00</published><updated>2017-06-17T16:07:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/wrangell</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/wrangell">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        5);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Wrangell-St. Elias National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-142.921965, 61.448960] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-1.jpg&quot;&gt;&lt;/a&gt;


Sorry about the previous blank post, weird Canadian gas station WiFi is not so reliable 

We spent a few days in Wrangell St. Elias National Park, the largest national park in the US. There are only two roads that go into two very small selections of the park.

We spent the first part of our trip in McCarthy and Kenicott, an abandoned mining historic town. There are blue copper chunks scattered around, and a lot of the original buildings are still (somewhat) standing. We did the Bonanza Mining Trail, where we climbed from the sunny 80 degree base of the mountain to the snowy, cloudy, very freezing top. At the top was a crumbling abandoned mining house that we snuck into. It was so awesome to see the weird stuff abandoned on the inside, imagining the (probably horrible) life that miners lived in there in the 20s.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-2.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-3.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-4.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-4.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-5.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-5.jpg&quot;&gt;&lt;/a&gt;


Next we took northern Nabesna Road to its end, doing a complimentary audio tour that the NPS provided. This place has a different vibe than Denali: it's much bigger and much more of a preserve, but with more day hikes instead backcountry backpacking options. Definitely a cool visit regardless, we did a short day hike to a previous homesteaded, now public use cabin.

We're currently somewhere in the Yukon or British Columbia, driving to Vancouver Island where we'll spend a few days before going to Seattle and Olympic National Park. It's snowing in the Yukon! In June! Weather makes no sense up here, I've forgotten what the night feels like.

&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-6.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-6.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/wrangell-7.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/wrangell-7.jpg&quot;&gt;&lt;/a&gt;

&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Exit Glacier, AK</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/exit-glacier" rel="alternate" type="text/html" title="Exit Glacier, AK" /><published>2017-06-13T11:49:00-07:00</published><updated>2017-06-13T11:49:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/exit-glacier</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/exit-glacier">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        5);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Exit Glacier&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-149.649859, 60.177945] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Homer, AK&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-151.548355, 59.642815] } }] };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


&lt;a href=&quot;/assets/personal/alaska-trip-2017/exit-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/exit-1.jpg&quot;&gt;&lt;/a&gt;


After our intense Denali trip, we spent a few days with Isaac's uncle Luke and his girlfriend Jonni who live a bit outside of Homer, AK. They fed us so much food (I was eating something besides Granola!!), let us crash in their living room, and took us fishing (no luck, sadly). It was a great refuel stop that we definitely needed, their hospitality was greatly appreciated!

Next we hit up the Exit Glacier in Kenai Fjords National Park. It was just a day hike, but we got some really cool views of the Exit Glacier. Enjoy the pictures!

 Next, we're driving to Wrangell National Park, near the AK/Canada border. That's our last stop in Alaska (everything else cool you need an airplane), but then we have lots of plans in Vancouver, Washington state, Oregon, Idaho, and Wyoming! Stay tuned!

&lt;a href=&quot;/assets/personal/alaska-trip-2017/exit-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/exit-2.jpg&quot;&gt;&lt;/a&gt;


&lt;a href=&quot;/assets/personal/alaska-trip-2017/exit-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/exit-3.jpg&quot;&gt;&lt;/a&gt;


&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Denali, AK</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/denali" rel="alternate" type="text/html" title="Denali, AK" /><published>2017-06-09T20:29:00-07:00</published><updated>2017-06-09T20:29:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/denali</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/denali">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        5);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Denali National Park&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-151.192224, 63.113509] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-1.jpg&quot;&gt;&lt;/a&gt;


We just got back from a 3 day 2 night backpacking adventure through Denali National Park, AK. It might be my most favorite backpacking adventure yet.

Denali is set up very differently. Instead of having trails and designated campgrounds, they just have 1 road that goes through the park. No trail development, the backcountry is 100% raw undeveloped nature. You pick squares of like 20 square miles to stay in each night (only 4 people allowed in each huge section!), plan your trip, then a bus drops you off on the side of the road with whatever you packed, a topographic map, and a compass.

We were lost and confused for much of the trip, as we aren't as good at route finding as we'd like to be. But we corrected our navigation errors, stuck with our schedule, found clearings in dense trees/brush, climbed mountains, forded through rivers, avoided wildlife, and  ultimately persevered for all 25-ish miles of the trip.

It was like nothing I've ever done before, and was honestly one of the most humbling things I've ever experienced. You can't really understand the humongous scale and awe-inspiring beauty of Alaska even when you're inside of the park: but enough of my second-rate poetic word choice. Enjoy some pictures! 

&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-2.jpg&quot;&gt;&lt;/a&gt;



&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-3.jpg&quot;&gt;&lt;/a&gt;



&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-4.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-4.jpg&quot;&gt;&lt;/a&gt;



&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-5.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-5.jpg&quot;&gt;&lt;/a&gt;


Moose shed their antlers each year. There are many weird things to find in the backcountry: caribou antlers and skulls, unidentified animal bones, teeth, caribou carcasses, etc.

We also took a driving tour through the park (yes, I was that close to a moose inside of a car: no danger)

&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-6.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-6.jpg&quot;&gt;&lt;/a&gt;



&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-7.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-7.jpg&quot;&gt;&lt;/a&gt;


Finally, here's a close of up of the hair flip picture because it's hilarious:

&lt;a href=&quot;/assets/personal/alaska-trip-2017/denali-8.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/denali-8.jpg&quot;&gt;&lt;/a&gt;


&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry><entry><title type="html">Alaskan Highway</title><link href="http://localhost:4000/blog/travel/alaska-roadtrip/alaskan-highway" rel="alternate" type="text/html" title="Alaskan Highway" /><published>2017-06-05T16:27:00-07:00</published><updated>2017-06-05T16:27:00-07:00</updated><id>http://localhost:4000/blog/travel/alaska-roadtrip/alaskan-highway</id><content type="html" xml:base="http://localhost:4000/blog/travel/alaska-roadtrip/alaskan-highway">&lt;div id=&quot;leaflet-map-default&quot; class=&quot;leaflet-map-default&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var map = L.map(&quot;leaflet-map-default&quot;).setView(
        [0, 0],
        3);

    // Infer basemap
    if(&quot;Topographic&quot; !== &quot;&quot;){
        // Use esri_basemap from esri-leaflet if specified (cleaner attributes)
        L.esri.basemapLayer(&quot;Topographic&quot;).addTo(map);
    } else {
        // else use the default basemap_provider in leaflet
        L.tileLayer.provider(&quot;OpenStreetMap.Mapnik&quot;).addTo(map);
    }

    // Infer geojson &amp; properties with it (popup, external hyperlinks, etc.)
    var addGeoJSONToMap = (geojson, href) =&gt; {
            if(Object.keys(geojson).length !== 0){
                var onEachFeature = (feature, layer) =&gt; {
                    if(feature.properties &amp;&amp; feature.properties.popupContent){
                            var popupContent = feature.properties.popupContent;
                var href_ = &quot;&quot;
                if(feature.properties.href){
                    href_ = feature.properties.href; }
                if(href !== &quot;&quot;){
                    href_ = href; }
                if(href_ !== &quot;&quot;){
                            popupContent += '&lt;a href=' + 
                                '&quot;' + href_ + '&quot;' +
                                ' target=&quot;_blank&quot;' +
                                '&gt;&lt;img src=&quot;/assets/logos/new-window-24.png&quot;&gt;&lt;/img&gt;&lt;/a&gt;';
                        }
                        layer.bindPopup(popupContent);
                    }
                    if((0 === 0) &amp;&amp; 
                       (0 === 0) &amp;&amp; 
                        feature.geometry.type === &quot;Point&quot;){
                        //If the blog author didn't specify center, infer from feature
                        var lat = feature.geometry.coordinates[1];
                        var long = feature.geometry.coordinates[0];
                map.panTo(new L.LatLng(lat, long));
                    }
                };
                L.geoJSON(geojson, { 
                    onEachFeature: onEachFeature 
          }).addTo(map);
       }
    };
    var geojson = { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {&quot;popupContent&quot;: &quot;Sign Post Forest, Alaskan Highway&quot;}, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [-128.714362, 60.063366] } };
    if(Array.isArray(geojson)){
        for(var i=0; i&lt;geojson.length; i++){
            addGeoJSONToMap(geojson[i]);
        }
    } else {
        addGeoJSONToMap(geojson);
    }


&lt;a href=&quot;/assets/personal/alaska-trip-2017/signpost-1.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/signpost-1.jpg&quot;&gt;&lt;/a&gt;


Driving the Alaskan Highway was insane. Hundreds of miles of undeveloped nature stretches between tiny towns containing just a gas station, motel, and general store. We drove over 1500 miles in 3 days (with no showers!). In the stretches of nature, we saw Black Bears, Grizzly Bears, Moose, Bison, even a porcupine on the side of the road. Isaac got some cool pictures of them (my camera never seemed to be out at the right time).

The highlight of the small towns was the Sign Post Forest in Watson Lake, Yukon Canada. There are hundreds of 15 foot posts covered in thousands of license plates, state/county/town/college signs, and to other memorabilia of Alaskan Highway drivers. It goes on forever!

We didn't know this existed beforehand, or else we would have brought along some old license plates or signs. What we did have, however, was the now bug covered Marquette license plate cover that was on the front of my car.

We took it off my car, found an old screw lying around, and fixed it to a board! Kevin and Isaac each attached a hair tie to it. Hope I can come back to it in 20 years or so and see it still there.

If ever any of you are on that highway at any time in your life, here's how you find my sign among the thousands:

Go to the front entrance (or whatever entrance this is):

&lt;a href=&quot;/assets/personal/alaska-trip-2017/signpost-2.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/signpost-2.jpg&quot;&gt;&lt;/a&gt;


Walk through the entrance, towards the first metal light post you see:

&lt;a href=&quot;/assets/personal/alaska-trip-2017/signpost-3.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/signpost-3.jpg&quot;&gt;&lt;/a&gt;


It'll be the first wooden post to the right of the metal light post:

&lt;a href=&quot;/assets/personal/alaska-trip-2017/signpost-4.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/signpost-4.jpg&quot;&gt;&lt;/a&gt;


Midway down that pole!

&lt;a href=&quot;/assets/personal/alaska-trip-2017/signpost-5.jpg&quot; &gt;&lt;img class=&quot;travel-image&quot; src=&quot;/assets/personal/alaska-trip-2017/signpost-5.jpg&quot;&gt;&lt;/a&gt;


&lt;/script&gt;</content><author><name>David Vitale</name></author><category term="travel" /><category term="nature" /><category term="roadtrip" /><summary type="html"></summary></entry></feed>